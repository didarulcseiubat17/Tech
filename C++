GG-------------
(A method has parameters and takes arguments. argument is the value/variable/reference being passed in, parameter is the receiving variable used w/in the function/block.) 
Structure vs class in C++///////
1) Members of a class are private by default and members of struct are public by default.
2) When deriving a struct from a class/struct, default access-specifier for a base class/struct is public. And when deriving a class, default access specifier is private.


References in C++/////////////
When a variable is declared as reference, it becomes an alternative name for an existing variable. A variable can be declared as reference by putting ‘&’ in the declaration.(ampersand)
int& ref = x;

difference between value types and reference types://///////
A value type is held on the stack and a copy of it is passed to called methods
A reference value is held in the managed heap and the stack holds only a pointer (reference) to its location. The location, and not the object, is passed to called methods

References vs Pointers//////////
Both references and pointers can be used to change local variables of one function inside another function. Both of them can also be used to save copying of big objects when passed as arguments to functions or returned from functions, to get efficiency gain.
References are less powerful than pointers
1) Once a reference is created, it cannot be later made to reference another object; it cannot be reseated. This is often done with pointers.
2) References cannot be NULL. Pointers are often made NULL to indicate that they are not pointing to any valid thing.
3) A reference must be initialized when declared. There is no such restriction with pointers
References are safer and easier to use:
1) Safer: Since references must be initialized, wild references like wild pointers are unlikely to exist. It is still possible to have references that don’t refer to a valid location 
2) Easier to use: References don’t need dereferencing operator to access the value. They can be used like normal variables. ‘&’ operator is needed only at the time of declaration. Also, members of an object reference can be accessed with dot operator (‘.’), unlike pointers where arrow operator (->) is needed to access members.
**Together with the above reasons, there are few places like copy constructor argument where pointer cannot be used. Reference must be used pass the argument in copy constructor. Similarly references must be used for overloading some operators like ++.
In C++, Reference variables are safer than pointers because reference variables must be initialized and they cannot be changed to refer to something else once they are initialized. But there are exceptions where we can have invalid references.
1) Reference to value at uninitialized pointer.
int *ptr;
int &ref = *ptr;  // Reference to value at some random memory location
2) Reference to a local variable is returned.
int& fun()
{
   int a = 10;
   return a;
}
Once fun() returns, the space allocated to it on stack frame will be taken back. So the reference to a local variable will not be valid.

Pass arguments by reference or pointer://///////////
1) To modify local variables of the caller function: A reference (or pointer) allows called function to modify a local variable of the caller function. 
2) For passing large sized arguments: If an argument is large, passing by reference (or pointer) is more efficient because only an address is really passed, not the entire object. 
3) To avoid Object Slicing: If we pass an object of subclass to a function that expects an object of superclass then the passed object is sliced if it is pass by value. 
4) To achieve Run Time Polymorphism in a function 
We can make a function polymorphic by passing objects as reference (or pointer) to it.

Function Overloading in C++///////////////
Function overloading is a feature in C++ where two or more functions can have the same name but different parameters.
Function overloading can be considered as an example of polymorphism feature in C++.

Functions that cannot be overloaded in C++(error)///////
1) Function declarations that differ only in the return type. 
2) Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration. 
3) Parameter declarations that differ only in a pointer * versus an array [] are equivalent. 
4) Parameter decla'rations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.
5) Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent. That is, the const and volatile type-specifiers for each parameter type are ignored when determining which function is being declared, defined, or called. 
6) Two parameter declarations that differ only in their default arguments are equivalent. 

Function overloading and const keyword
C++ allows member methods to be overloaded on the basis of const type. Overloading on the basis of const type can be useful when a function return reference or pointer. We can make one function const, that returns a const reference or const pointer, other non-const function, that returns non-const reference or pointer.
C++ allows functions to be overloaded on the basis of const-ness of parameters only if the const parameter is a reference or a pointer. 

Overloading doesn’t work for derived class in C++ programming language. There is no overload resolution between Base and Derived. 

To overload main() function in C++, it is necessary to use class and declare the main as member function. Note that main is not reserved word in programming languages like C, C++, Java and C#. 

Inline Functions in C++////////////////
For small, commonly-used functions, the time needed to make the function call is often a lot more than the time needed to actually execute the function’s code. 
In fact, all the functions defined inside the class are implicitly inline. If you need to explicitly declare inline function in the class then just declare the function inside the class and define it outside the class using inline keyword.

OOP=================
Object: Objects are basic run-time entities in an object oriented system, objects are instances of a class these are defined user defined data types. Object take up space in memory and have an associated address。
Class: Class is a blueprint of data and functions or methods. Class does not take any space.
Encapsulation: Wrapping up(combing) of data and functions into a single unit is known as encapsulation. The data is not accessible to the outside world and only those functions which are wrapping in the class can access it. This insulation of the data from direct access by the program is called data hiding or information hiding.
Data abstraction refers to, providing only needed information to the outside world and hiding implementation details. 
Inheritance: inheritance is the process by which objects of one class acquire the properties of objects of another class.
Polymorphism: polymorphism means ability to take more than one form. An operation may exhibit different behaviors in different instances. The behavior depends upon the types of data used in the operation.
C++ supports operator overloading and function overloading.
Operator overloading is the process of making an operator to exhibit different behaviors in different instances is known as operator overloading.
Function overloading is using a single function name to perform different types of tasks.
Dynamic Binding: In dynamic binding, the code to be executed in response to function call is decided at runtime. C++ has virtual functions to support this.
Message Passing: Objects communicate with one another by sending and receiving information to each other. 

A class declaration can contain static object of self type, it can also have pointer to self type, but it cannot have a non-static object of self type.
class Test {
  static Test self;  // works fine
};//Static variables do not contribute to the size of objects. So no problem in calculating size with static variables of self type.
For a com'piler, all pointers have a fixed size irrespective of the data type they are pointing to, so no problem with this also.
Size of an empty class is not zero. It is 1 byte generally. It is nonzero to ensure that the two different objects will have different addresses.

static member functions in C++////////
1) static member functions do not have this pointer.
2) A static member function cannot be virtual
3) Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.
4) A static member function can not be declared const, volatile, or const volatile.

The keyword static can be used in three major contexts: inside a function, inside a class definition, and in front of a global variable inside a file making up a multifile program.
1.1 The use of static inside a function is the simplest. It simply means that once the variable has been initialized, it remains in memory until the end of the program. You can think of it as saying that the variable sticks around, maintaining its value, until the program completely ends. 
1.2 You can also use static in this fashion to prevent a variable from being reinitialized inside a loop. The trick is that the keyword static prevents re-initialization of the variable. One feature of using a static keyword is that it happens to be initialized to zero automatically for you -- but don't rely on this behavior
1.3 You might use a static variable in order to preserve information about the last value a function returned, 
2.1 The second use of static is inside a class definition. While most variables declared inside a class occur on an instance-by-instance basis, a static member variable has the same value in any instance of the class and doesn't even require an instance of the class to exist. Importantly, it is good syntax to refer to static member functions through the use of a class name (class_name::x; rather than instance_of_class.x;). Doing so helps to remind the programmer that static member variables do not belong to a single instance of the class and that you don't need to have a single instance of a class to use a static member variable. As you have probably noticed, to access the static member, you use the scope operator, ::, when you refer to it through the name of the class.
   you cannot initialize the static class member inside of the class.
2.2 Static member functions are functions that do not require an instance of the class, static member functions can only operate on static members, Static member functions can be used to modify static member variables to keep track of their values
Notice that you must include the type of the static variable when you set it!
3. The last use of static is as a global variable inside a file of code. It's scope -- or visibility -- is limited to the file.

‘this’ pointer in C++////////////////////
‘this’ pointer is a constant pointer that holds the memory address of the current object. The ‘this’ pointer is passed as a hidden argument to all nonstatic member function calls and is available as a local variable within the body of all nonstatic functions. ‘this’ pointer is not available in static member functions as static member functions can be called without any object (with class name).
1) When local variable’s name is same as member’s name
2) To return reference to the calling object
/* Reference to the calling object can be returned */
Test& Test::func ()
{
   // Some processing
   return *this;
} 
When a reference to a local object is returned, the returned reference can be used to "chain function calls" on a single object.//obj1.setX(10).setY(20);
The type of this depends upon function declaration. 

Constructor and Destructor:////////////////
A constructor is a member function of a class which initializes objects of a class. 
How constructors are different from a normal member function?
In fact except inline, no other keyword is allowed in the declaration of constructor.
A constructor is different from normal functions in following ways:
(i) Constructor has same name as the class itself
(ii) Constructors don’t have return type
(iii) A constructor is automatically called when an object is created.
(iv) If we do not specify a constructor, C++ compiler generates a default constructor for us (expects no parameters and has an empty body).

A copy constructor is a member function which initializes an object using another object of the same class. A copy constructor has the following general function prototype:
	ClassName (const ClassName &old_obj); 
If we don’t define our own copy constructor, the C++ compiler creates a default copy constructor for each class which does a member wise copy between objects. The compiler created copy constructor works fine in general. We need to define our own copy constructor only if an object has pointers or any run time allocation of resource like file handle, a network connection..etc.
Compiler doesn’t create a default constructor if we write any constructor even if it is copy constructor.  Compiler creates a copy constructor if we don’t write our own. Compiler creates it even if we have written other constructors in class. 
compiler created temporary objects cannot be bound to non-const references

Destructor is a member function which destructs or deletes an object. there can only one destructor in a class
Destructors have same name as the class preceded by a tilde (~)
Destructors don’t take any argument and don’t return anything

In C++, class variables are initialized in the same order as they appear in the class declaration.

When do we use Initializer List in C++?
Initializer List is used to initialize data members of a class. The list of members to be initialized is indicated with constructor as a comma separated list followed by a colon.
1) For initialization of non-static const data members:
2) For initialization of reference members:
3) For initialization of member objects which do not have default constructor:
4) For initialization of base class members : 
5) When constructor’s parameter name is same as data member
6) For Performance reasons:

when a class has private destructur, only dynamic objects of that class can be created. Following is a way to create classes with private destructors and have a function as friend of the class. The function can only delete the objects.

Inheritance:////////////

Following are the things which a derived class doesn’t inherits from its parent :
1) The base class’s constructors and destructor.
2) The base class’s friends

Virtual functions allow us to create a list of base class pointers and call methods of any of the derived classes without even knowing kind of derived class object.

The constructors of inherited classes are called in the same order in which they are inherited. 

 When we use ‘virtual’ keyword, the default constructor of grandparent class is called by default even if the parent classes explicitly call parameterized constructor.
 
Object slicing happens when a derived class object is assigned to a base class object, additional attributes of a derived class object are sliced off to form the base class object.
 Object slicing doesn’t occur when pointers or references to objects are passed as function arguments since a pointer or reference of any type takes same amount of memory. 
 Object slicing can be prevented by making the base class function pure virtual there by disallowing object creation. It is not possible to create the object of a class which contains a pure virtual method.
 
 In C++, if a derived class redefines base class member method then all the base class methods with same name become hidden in derived class,even if the signature of the derived class method is different.

Friend://///////////

 Following are some important points about friend functions and classes:
1) Friends should be used only for limited purpose. too many functions or external classes are declared as friends of a class with protected or private data, it lessens the value of encapsulation of separate classes in object-oriented programming.
2) Friendship is not mutual. If a class A is friend of B, then B doesn’t become friend of A automatically.
3) Friendship is not inherited (See this for more details)
4) The concept of friends is not there in Java.
 



Standard Template Library (STL):-----------------
The pair container is a simple container consisting of two data elements or objects. The first element is referenced as ‘first’ and the second element as ‘second’ and the order is fixed (first, second). The array of objects allocated in a map or hash_map are of type ‘pair’ by default in which all the ‘first’ elements are unique keys associated with their ‘second’ value objects.

Vectors are same as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted, with their storage being handled automatically by the container. Vector elements are placed in contiguous storage so that they can be accessed and traversed using iterators. 

Lists are sequence containers that allow non-contiguous memory allocation. As compared to vector, list has slow traversal, but once a position has been found, insertion and deletion are quick. Normally, when we say a List, we talk about doubly linked list.

Dequeue: Double ended queues are sequence containers with the feature of expansion and contraction on both the ends. They are similar to vectors, but are more efficient in case of insertion and deletion of elements at the end, and also the beginning. Unlike vectors, contiguous storage allocation may not be guaranteed.

Queues are a type of container adaptors which operate in a first in first out (FIFO) type of arrangement. Elements are inserted at the back (end) and are deleted from the front.

Priority queues are a type of container adaptors, specifically designed such that the first element of the queue is the greatest of all elements in the queue.

Stacks are a type of container adaptors with LIFO(Last In First Out) type of working, where a new element is added at one end and (top) an element is removed from that end only.

Multisets are a type of associative containers similar to set, with an exception that multiple elements can have same values.

Maps are associative containers that store elements in a mapped fashion. Each element has a key value and a mapped value. No two mapped values can have same key values.

Multimap is similar to mapwith an addition that multiple elements can have same keys. Rather than each element being unique, the key value and mapped value pair has to be unique in this case.













PQ---------
Any C++ class with at least one pure virtual function is considered to be an abstract class. This means that there can be no object created for that class (since it is abstract). abstract classes in C++ are not explicitly declared to be abstract – having a pure virtual function implicitly makes a class abstract in C++. 
A pure virtual function is a function that has the notation "= 0" in the declaration of that function. 
Base class constructors and derived class destructors are called first
